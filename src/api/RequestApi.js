/**
 * Nozomi API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CreateRequestInputModel from '../model/CreateRequestInputModel';
import RequestViewModel from '../model/RequestViewModel';
import RequestViewModelIEnumerablePaginatedViewModel from '../model/RequestViewModelIEnumerablePaginatedViewModel';
import UpdateRequestInputModel from '../model/UpdateRequestInputModel';

/**
* Request service.
* @module api/RequestApi
* @version 5
*/
export default class RequestApi {

    /**
    * Constructs a new RequestApi. 
    * @alias module:api/RequestApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the requestAllGet operation.
     * @callback module:api/RequestApi~requestAllGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestViewModelIEnumerablePaginatedViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all requests owned by the stated user with a pagination of 100 items.
     * @param {Object} opts Optional parameters
     * @param {module:api/RequestApi~requestAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestViewModelIEnumerablePaginatedViewModel}
     */
    requestAllGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'index': opts['index']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RequestViewModelIEnumerablePaginatedViewModel;

      return this.apiClient.callApi(
        '/Request/All', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the requestCreatePost operation.
     * @callback module:api/RequestApi~requestCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a request.
     * @param {Object} opts Optional parameters
     * @param {module:api/RequestApi~requestCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    requestCreatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/Request/Create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the requestDeleteGuidDelete operation.
     * @callback module:api/RequestApi~requestDeleteGuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a request.
     * @param {module:api/RequestApi~requestDeleteGuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    requestDeleteGuidDelete(guid, callback) {
      let postBody = null;

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/Request/Delete/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the requestGetGuidGet operation.
     * @callback module:api/RequestApi~requestGetGuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the request with the mentioned guid.
     * @param {module:api/RequestApi~requestGetGuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestViewModel}
     */
    requestGetGuidGet(guid, callback) {
      let postBody = null;

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RequestViewModel;

      return this.apiClient.callApi(
        '/Request/Get/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the requestUpdatePut operation.
     * @callback module:api/RequestApi~requestUpdatePutCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a request.
     * @param {Object} opts Optional parameters
     * @param {module:api/RequestApi~requestUpdatePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    requestUpdatePut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/Request/Update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
