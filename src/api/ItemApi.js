/**
 * Nozomi API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CreateItemInputModel from '../model/CreateItemInputModel';
import ItemViewModel from '../model/ItemViewModel';
import ItemViewModelIEnumerablePaginatedViewModel from '../model/ItemViewModelIEnumerablePaginatedViewModel';
import UpdateItemInputModel from '../model/UpdateItemInputModel';

/**
* Item service.
* @module api/ItemApi
* @version 5
*/
export default class ItemApi {

    /**
    * Constructs a new ItemApi. 
    * @alias module:api/ItemApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the itemAllIndexGet operation.
     * @callback module:api/ItemApi~itemAllIndexGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemViewModelIEnumerablePaginatedViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtains all of the relevant items you own.
     * @param {module:api/ItemApi~itemAllIndexGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemViewModelIEnumerablePaginatedViewModel}
     */
    itemAllIndexGet(index, parentGuidFilter, slugFilter, nameFilter, callback) {
      let postBody = null;

      let pathParams = {
        'index': index,
        'parentGuidFilter': parentGuidFilter,
        'slugFilter': slugFilter,
        'nameFilter': nameFilter
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ItemViewModelIEnumerablePaginatedViewModel;

      return this.apiClient.callApi(
        '/Item/All/{index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the itemCreatePost operation.
     * @callback module:api/ItemApi~itemCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an item.
     * @param {Object} opts Optional parameters
     * @param {module:api/ItemApi~itemCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    itemCreatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/Item/Create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the itemExistsSlugGet operation.
     * @callback module:api/ItemApi~itemExistsSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates if the slug is being used.
     * @param {Object} opts Optional parameters
     * @param {module:api/ItemApi~itemExistsSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    itemExistsSlugGet(slug, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
        'local': opts['local']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Boolean';

      return this.apiClient.callApi(
        '/Item/Exists/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the itemGetBySlugSlugGet operation.
     * @callback module:api/ItemApi~itemGetBySlugSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtains the specified item.
     * @param {module:api/ItemApi~itemGetBySlugSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemViewModel}
     */
    itemGetBySlugSlugGet(slug, callback) {
      let postBody = null;

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ItemViewModel;

      return this.apiClient.callApi(
        '/Item/GetBySlug/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the itemGetItemGuidGet operation.
     * @callback module:api/ItemApi~itemGetItemGuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtains the specified item.
     * @param {module:api/ItemApi~itemGetItemGuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemViewModel}
     */
    itemGetItemGuidGet(itemGuid, callback) {
      let postBody = null;

      let pathParams = {
        'itemGuid': itemGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ItemViewModel;

      return this.apiClient.callApi(
        '/Item/Get/{itemGuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the itemUpdatePut operation.
     * @callback module:api/ItemApi~itemUpdatePutCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the specified item.
     * @param {Object} opts Optional parameters
     * @param {module:api/ItemApi~itemUpdatePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    itemUpdatePut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/Item/Update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
